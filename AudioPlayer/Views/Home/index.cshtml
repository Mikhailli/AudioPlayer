@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<AudioPlayer.AudioViewModel>
@{
    Layout = "_Layout";
}

<link rel="stylesheet" type="text/css" href="~/css/dataTable.css">
<link rel="stylesheet" type="text/css" href="~/css/index.css">

@foreach(var f in Model)
{
    <p style="display: none" class="name">@(f.Path)</p>
}

<div class="wrapper" style="margin-top: 5px;">
    <div class="audioplayer" style="margin-left: 10px;">
        <audio id="audio" controls style="width: 100%; max-height: 30px"></audio>
            <div id="controls">
                <button style="margin-left: 10px; margin-bottom: 5px;" class="play"><img src="~/play.png" alt="|>"/></button>
                <button style="margin-bottom: 5px;" class="pause"><img src="~/pause.png" alt="||"/></button>
                <button style="margin-right: 20px; margin-bottom: 5px; float: right" class="next"><img src="~/next_button.png" alt=">>"/></button>
                <button style="margin-right: 12px; margin-bottom: 5px; float: right" class="prev"><img src="~/previous_button.png" alt="<<"/></button>
            </div>
        </div>
    <div class="wrapper2 download" style="min-width: 300px; margin-left: 10px; ">
            <div class="text"><h4>Выберите файл для загрузки</h4></div>
        
        <div class="select_file" style="margin-top: 5px; margin-bottom: 5px;">
            <input style="display: none;" id="uploadFile" type="file" accept="audio/*" name="uploadedFile" title=" "/>
            <button style="display: table; margin: 0 auto; background-color: #AFCDE7; width: 80%;" id="bntUpload" class="btn btn-sm btn-primary mr-1">Выбрать файл</button>
        </div>
        <div class="upload_file" style="margin-top: 5px; margin-bottom: 5px;">
            <input style="display: table; margin: 0 auto; background-color: #AFCDE7; width: 80%;" id="submit" class="btn btn-sm btn-primary mr-1" type="submit" value="Загрузить">
        </div>
        <div class="selected_filename">
            <span id="selected_filename"></span>
        </div>
        <div class="radio_buttons">
            <fieldset>
                <legend>Some legend for radio buttons:</legend>
                <div>
                    <input type="radio" id="First Radio Button" name="scales"/>
                    <label for="First Radio Button">First Radio Button</label>
                </div>
                <div>
                    <input type="radio" id="Second Radio Button" name="horns"/>
                    <label for="Second Radio Button">Second Radio Button</label>
                </div>
            </fieldset>
        </div>
        <div class="check_boxes">
            <fieldset>
                <legend>Some legend for check boxes:</legend>

                <div>
                    <input type="checkbox" id="First Check Box" name="scales"/>
                    <label for="First Check Box">First Check Box</label>
                </div>

                <div>
                    <input type="checkbox" id="Second Check Box" name="horns"/>
                    <label for="Second Check Box">Second Check Box</label>
                </div>
            </fieldset>
        </div>
    </div>
    <div class="features" style="margin-right: 10px; width: 100%">
        <table style="width: 100%" class="hover table-opacity-background display nowrap text-center" id="audio_table">
            <thead>
            <tr>
                <th>№ в плейлисте</th>
                <th data-name>Название трека</th>
                <th>Длительность</th>
                <th></th>
            </tr>
            </thead>
        </table>
    </div>
</div>

<div id="modal-placeholder"></div>

<script asp-src-include="js/datatables/jquery.js" type="text/javascript" charset="UTF-8"></script>
<script asp-src-include="js/datatables/dataTable.js" type="text/javascript" charset="UTF-8"></script>
<script asp-src-include="js/indexMenu.js" asp-append-version="true"></script>
<script src="https://kit.fontawesome.com/c72087de1f.js" crossorigin="anonymous"></script>

<script>
    let audio = document.getElementById("audio");      
    let btnPlay = document.querySelector(".play");   
    let btnPause = document.querySelector(".pause"); 
    let btnPrev = document.querySelector(".prev");  
    let btnNext = document.querySelector(".next");  
    
    let playlist = [];
    let isAudioPlay;
 
    let count = @Model.Count();
    
    for (let i = 0; i < count; i++){
        let song = document.getElementsByTagName('p')[i].textContent;
        playlist.push(song);
    }
    
    let track;

    $(document).ready( function() {
        $('#bntUpload').click(function(){
            $("#uploadFile").click();
        });
         
        $('#uploadFile').change(function() {
            let files = document.getElementById('uploadFile').files;
            $('#selected_filename').text('\n' + files.item(0).name);
        });
    });
    
    table = $('#audio_table').DataTable(
        {
            'info': false,
            'lengthMenu': [10, 25, 50, 100],
            'rowReorder': true,
            'order': [],
            "processing": true,
            "serverSide": true,
            "filter": true,
            "ajax": {
                "url": `/Home/get`,
                "type": "POST"
            },
            'columnDefs': [
                { orderable: false, targets: '_all' }
            ],
            'createdRow': function (row, data) {
                $(row).attr('data-number', data.numberInPlayList);  
            },
            "columns": [
                {
                    data: null,
                    name: 'NumberInPlayList',
                    render: function(data)
                    {
                        return '<td class="withBorder">' + data.numberInPlayList + '</td>';
                    }
                },
                {
                    data: null,
                    name: 'Name',
                    render: function(data)
                    {
                        return data.name;
                    }
                },
                {
                    data: null,
                    name: 'Duration',
                    render: function(data)
                    {
                        if (data.numberInPlayList - 1 == track && isAudioPlay) {
                            return '<button class="play" data-pause-btn data-url=' + data.numberInPlayList + '><span style="margin-right: 5px;" class="fa-solid fa-stop"></button>' + data.duration;
                        }
                        return '<button class="play" data-play-btn data-url=' + data.numberInPlayList + '><span style="margin-right: 5px;" class="fa-solid fa-play"></button>' + data.duration;
                    }
                },
                {
                    data: null,
                    render: function (data) {
                        if (data.numberInPlayList - 1 == track && isAudioPlay) {
                            return '<button class="btn btn-sm btn-primary mr-1" data-update-btn data-url="/Home/UpdateAudio?audioId=' + data.numberInPlayList + '" ><span style="margin-right: 5px;" class="fas fa-pencil-alt"></span> Изменить</button>';
                        }
                        return '<button class="btn btn-sm btn-primary mr-1" data-update-btn data-url="/Home/UpdateAudio?audioId=' + data.numberInPlayList + '" ><span style="margin-right: 5px;" class="fas fa-pencil-alt"></span> Изменить</button>' +
                            '<button style="margin-left: 10px" class="btn btn-sm btn-danger my-1" data-delete-btn data-url="/Home/DeleteAudio?audioId=' + data.numberInPlayList + '"><span style="margin-right: 5px;" class="fas fa-times">  </span> Удалить</button>';
                    },
                    width: 'auto'
                }
            ],
            "style_data_conditional": [
                    {
                        'borderRight': '5px solid red',
                        'borderLeft': '5px solid red',
                    },
                ],
            'language':
            {
                'search': 'Поиск',
                'lengthMenu': 'Показать _MENU_ элементов',
                'zeroRecords': 'Совпадений не найдено',
                'processing': 'Данные загружаются...',
                'paginate':
                {
                    'previous': '<',
                    'next': '>'
                }
            },
            searchPanes: {
                viewTotal: true
            }
        }
    ).page('first').draw('page');
    
    window.onload = function() {
        isAudioPlay = false;
        if (sessionStorage.getItem('track') == null) {
            track = 0;
        }
        else {
            track = sessionStorage.getItem('track');
        }
    
        if (sessionStorage.getItem('audioTime') == null) {
            audio.src = '.' + playlist[0];
        } 
        else {
            audio.src = sessionStorage.getItem('audioSrc');
            audio.currentTime = sessionStorage.getItem('audioTime');
            audio.play();
            audioPlay = setInterval(function () {
                let audioTime = sessionStorage.getItem('audioTime');
                sessionStorage.setItem('audioSrc', '.' + playlist[track]);
                sessionStorage.setItem('audioTime', audio.currentTime);
                let audioLength = Math.round(audio.duration);
                if (audioTime == audioLength.toString() && track < playlist.length - 1) {
                    track++;
                    switchTrack(track);
                } 
                else if (audioTime == audioLength.toString()) {
                    track = 0;
                    switchTrack(track);
                }
            }, 10);
        }
            
        table.draw(false);
    }
    
    btnPlay.addEventListener("click", function() {
        audio.play();
        isAudioPlay = true;
        table.draw(false);
        sessionStorage.setItem('isAudioPlay', 'true');
        audioPlay = setInterval(function () {
            let audioTime = Math.round(audio.currentTime);
            sessionStorage.setItem('audioSrc', '.' + playlist[track]);
            sessionStorage.setItem('audioTime', audio.currentTime);
            let audioLength = Math.round(audio.duration)
            if (audioTime === audioLength && track < playlist.length - 1) {
                track++;
                switchTrack(track);
            } 
            else if (audioTime === audioLength && track >= playlist.length - 1) {
                track = 0;
                switchTrack(track);
            }
        }, 10);
    });
        
    btnPause.addEventListener("click", function() {
        audio.pause();
        isAudioPlay = false;
        sessionStorage.setItem('isAudioPlay', 'false');
        table.draw(false);
        clearInterval(audioPlay);
    });
    
    btnPrev.addEventListener("click", function() {
        if (track > 0) {
            track--;
            switchTrack(track);
        } 
        else {
            track = playlist.length - 1;
            switchTrack(track);
        }
    });
        
    btnNext.addEventListener("click", function() {
        if (track < playlist.length - 1) {
            track++;
            switchTrack(track);
        }
        else {
            track = 0;
            switchTrack(track);
        }
    });
    
    function switchTrack (numTrack) {
        track = numTrack;
        sessionStorage.setItem('track', numTrack);
        audio.src = '.' + playlist[numTrack];
        isAudioPlay = true;
        sessionStorage.setItem('isAudioPlay', 'true');
        localStorage.setItem('audioSrc', '.' + playlist[numTrack]);
        audio.currentTime = 0;
        audio.play();
        table.draw(false);
    }
    
    $('#submit').on('click', function (e) {
        e.preventDefault();
        let files = document.getElementById('uploadFile').files;
        if (files.length > 0) {
            if (window.FormData !== undefined) {
                let data = new FormData();
                data.append("file" + 0, files[0]);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AddAudio", "Home")',
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (result) {
                        playlist.push('/Audios/' + files.item(0).name);
                        table.draw(false);
                        $('#selected_filename').text('');
                        document.getElementById('uploadFile').value = '';
                        },
                        error: function (xhr) {
                            alert(xhr.responseText);
                        }
                    }
                );
            
            } 
            else {
                alert("Браузер не поддерживает загрузку файлов HTML5!");
            }
        }
    });
            
    let placeholderElement = $('#modal-placeholder');
            
    placeholderElement.on('hide.bs.modal', '.modal', function () {
        placeholderElement.off('click', '[data-dismiss="modal"]');
    });
            
    table.on('click', 'button[data-delete-btn]', function () {
        let request = $(this).data('url');
        $.get(request).done(function (data) {
            placeholderElement.html(data);
            placeholderElement.find('.modal').modal('show');
        });
                
        placeholderElement.on('click', '[data-save="modal"]', function (event) {
            event.preventDefault();
                    
            let form = $(this).parents('.modal').find('form');
            let actionUrl = form.attr('action');
            let dataToSend = form.serialize();
                    
            $.post(actionUrl, dataToSend).done(function (data) {
                let newBody = $('.modal-body', data);
                placeholderElement.find('.modal-body').replaceWith(newBody);
                let numberInPlaylist = newBody.find('[name="NumberInPlayList"]').val();
                       
                playlist.splice(numberInPlaylist - 1, 1);
                if (track.toString() === (numberInPlaylist - 1).toString()) {
                    if (track.toString() === playlist.length.toString()) {
                        track--;
                        switchTrack(track);
                    }
                    else {
                        switchTrack(track);
                    }
                    
                    isAudioPlay = false;
                    audio.pause();
                    sessionStorage.setItem('audioSrc', '.' + playlist[track]);
                    sessionStorage.setItem('audioTime', audio.currentTime);
                    sessionStorage.setItem('isAudioPlay', 'false');
                                                    
                }
                if (track > numberInPlaylist - 1) {
                    track--;
                }
                        
                try {
                    table.draw(false);
                } 
                finally {
                    placeholderElement.off('click', '[data-save="modal"]');
                }
                placeholderElement.find('.modal').modal('hide');
            });
                    
        });
    
        placeholderElement.on('click', '[data-mdb-dismiss="modal"]', function (event) {
            event.preventDefault();
            placeholderElement.find('.modal').modal('hide');
        });
    });
            
    table.on('click', 'button[data-update-btn]', function () {
        let requestUrl = $(this).data('url');
        $.get(requestUrl).done(function (data) {
            placeholderElement.html(data);
            placeholderElement.find('.modal').modal('show');
        });
                
        placeholderElement.on('click', '[data-save="modal"]', function (event) {
            event.preventDefault();
                    
            let form = $(this).parents('.modal').find('form');
            let actionUrl = form.attr('action');
            let dataToSend = form.serialize();
                    
            $.post(actionUrl, dataToSend).done(function (data) {
                let newBody = $('.modal-body', data);
                placeholderElement.find('.modal-body').replaceWith(newBody);
                        
                try {
                    let numberInPlaylist = newBody.find('[name="NumberInPlayList"]').val();
                    let audioName = newBody.find('[name="Name"]').val();
                    let rowToUpdate = $('table#audio_table').find('tr[data-number="' + numberInPlaylist + '"]')
                    if (rowToUpdate) {
                        rowToUpdate.find('th[data-name]').text(audioName);
                    }
                    table.draw(false);
                } 
                finally {
                    placeholderElement.off('click', '[data-save="modal"]');
                    placeholderElement.find('.modal').modal('hide');
                }
            });
        });
    
        placeholderElement.on('click', '[data-mdb-dismiss="modal"]', function (event) {
            event.preventDefault();
            placeholderElement.find('.modal').modal('hide');
        });
    });
    
    table.on('click', 'button[data-play-btn]', function () {
        let numberInPlayList = $(this).data('url');
        switchTrack(numberInPlayList - 1);
    });
    
    table.on('click', 'button[data-pause-btn]', function () {
        audio.pause();
        isAudioPlay = false;
        sessionStorage.setItem('isAudioPlay', 'false');
        table.draw(false);
        clearInterval(audioPlay);
    });
</script>