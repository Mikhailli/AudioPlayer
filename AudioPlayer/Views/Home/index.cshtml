@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<AudioPlayer.AudioViewModel>
@{
    Layout = "_Layout";
}
<style>


</style>

<link rel="stylesheet" type="text/css" href="~/css/dataTable.css">
<link rel="stylesheet" type="text/css" href="~/css/index.css">
<h1>Выберите файл для загрузки</h1>
@*<form asp-action="Index" asp-controller="Home" method="post" enctype="multipart/form-data">
    <input id="audiofile" class="custom-file-input" type="file" accept="audio/*" name="uploadedFile" title=" "/><br>
    <input id="submit" type="submit" value="Загрузить" />
</form>*@

    <input id="uploadFile" class="custom-file-input" type="file" accept="audio/*" name="uploadedFile" title=" "/><br>
    <input id="submit" type="submit" value="Загрузить" />

<button></button>
<div class="audioplayer">
    <audio id="audio" controls></audio>
    <div id="controls">
        <button style="margin-left: 10px; margin-bottom: 5px;" class="play"><img src="~/play.png" alt="|>"/></button>
        <button style="margin-bottom: 5px;" class="pause"><img src="~/pause.png" alt="||"/></button>
        <button style="margin-right: 20px; margin-bottom: 5px; float: right" class="next"><img src="~/next_button.png" alt=">>"/></button>
        <button style="margin-right: 12px; margin-bottom: 5px; float: right" class="prev"><img src="~/previous_button.png" alt="<<"/></button>
    </div>
</div>
 
<h3>Все файлы</h3>
@foreach(var f in Model)
{
    <p style="display: none" class="name">@(f.Path)</p>
}

<div class="features">
    <table class="stripe row-border hover table-opacity-background display nowrap text-center" id="audio_table">
        <thead>
        <tr>
            <th>№ в плейлисте</th>
            <th data-name>Название трека</th>
            <th>Длительность</th>
            <th></th>
        </tr>
        </thead>
    </table>
</div>

<div id="modal-placeholder"></div>

<script asp-src-include="js/datatables/jquery.js" type="text/javascript" charset="UTF-8"></script>
<script asp-src-include="js/datatables/dataTable.js" type="text/javascript" charset="UTF-8"></script>
<script asp-src-include="js/indexMenu.js" asp-append-version="true"></script>

<script>
    let audio = document.getElementById("audio");   
    let time = document.querySelector(".time");     
    let btnPlay = document.querySelector(".play");   
    let btnPause = document.querySelector(".pause"); 
    let btnPrev = document.querySelector(".prev");  
    let btnNext = document.querySelector(".next");  
    
    
    let playlist = [];
    let isAudioPlay;
 
    let count = @Model.Count();
    
    for (let i = 0; i < count; i++){
        let song = document.getElementsByTagName('p')[i].textContent;
        playlist.push(song);
    }
    
    let treck;
    
    window.onload = function() {
        if (sessionStorage.getItem('isAudioPlay') == null) {
            isAudioPlay = false;
        }
        else {
            isAudioPlay = sessionStorage.getItem('isAudioPlay');
        }
        if (sessionStorage.getItem('treck') == null) {
                    treck = 0;
                    }
            else {
                treck = sessionStorage.getItem('treck');
            }
       
        if (sessionStorage.getItem('audioTime') == null) {
        audio.src = '.' + playlist[0];
        }
        else {
           audio.src = sessionStorage.getItem('audioSrc');
           audio.currentTime = sessionStorage.getItem('audioTime');
           audio.play();
                   audioPlay = setInterval(function () {
                       let audioTime = sessionStorage.getItem('audioTime');
                       sessionStorage.setItem('audioSrc', '.' + playlist[treck]);
                       sessionStorage.setItem('audioTime', audio.currentTime);
                       let audioLength = Math.round(audio.duration)
                       time.style.width = (audioTime * 100) / audioLength + '%';
                       if (audioTime == audioLength && treck < playlist.length - 1) {
                           treck++;
                          
                           switchTreck(treck);
                       } else if (audioTime == audioLength && treck >= playlist.length - 1) {
                           treck = 0;
                           
                           switchTreck(treck);
                       }
                   }, 10);
        }
    }
    
    
    
    
    
    table = $('#audio_table').DataTable(
            {
                'info': false,
                'lengthMenu': [4, 8, 16],
                'rowReorder': true,
                'order': [],
                "processing": true,
                "serverSide": true,
                "filter": true,
                "ajax": {
                    "url": `/Home/get`,
                    "type": "POST"
                },
                'columnDefs': [
                    { orderable: false, targets: '_all' }
                ],
                'createdRow': function (row, data, dataIndex) {
                  $(row).attr('data-number', data.numberInPlayList);  
                },
                "columns": [
                    {
                        data: null,
                        name: 'NumberInPlayList',
                        render: function(data)
                        {
                            return data.numberInPlayList;
                        }
                    },
                    {
                        data: null,
                        name: 'Name',
                        render: function(data)
                        {
                            return data.name;
                        }
                    },
                    {
                        data: null,
                        name: 'Duration',
                        render: function(data)
                        {
                            return data.duration;
                        }
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            if (data.numberInPlayList - 1 == treck && isAudioPlay) {
                                return '';
                            }
                            return '<button class="btn btn-sm btn-primary mr-1" data-update-btn data-url="/Home/UpdateAudio?audioId=' + data.numberInPlayList + '" ><span class="fas fa-pencil-alt"></span> Изменить</button>' +
                            '<button class="btn btn-sm btn-danger my-1" data-delete-btn data-url="/Home/DeleteAudio?audioId=' + data.numberInPlayList + '"><span class="fas fa-times"></span> Удалить</button>';
                        },
                        width: 'auto'
                    }
                ],
                'language':
                    {
                        'search': 'Поиск',
                        'lengthMenu': 'Показать _MENU_ элементов',
                        'zeroRecords': 'Совпадений не найдено',
                        'processing': 'Данные загружаются...',
                        'paginate':
                            {
                                'previous': '<',
                                'next': '>'
                            }
                    },
                searchPanes: {
                    viewTotal: true
                }
            }).page('first').draw('page');
            
    btnPlay.addEventListener("click", function() {
            audio.play();
            isAudioPlay = true;
            table.draw(false);
            sessionStorage.setItem('isAudioPlay', 'true');
            audioPlay = setInterval(function () {
                let audioTime = Math.round(audio.currentTime);
                sessionStorage.setItem('audioSrc', '.' + playlist[treck]);
                sessionStorage.setItem('audioTime', audio.currentTime);
                let audioLength = Math.round(audio.duration)
                if (audioTime == audioLength && treck < playlist.length - 1) {
                    treck++;
                    switchTreck(treck);
                } else if (audioTime == audioLength && treck >= playlist.length - 1) {
                    treck = 0;
                    switchTreck(treck);
                }
            }, 10);
        });
        
        btnPause.addEventListener("click", function() {
            audio.pause();
            isAudioPlay = false;
            sessionStorage.setItem('isAudioPlay', 'false');
            table.draw(false);
            clearInterval(audioPlay);
        });
        btnPrev.addEventListener("click", function() {
            if (treck > 0) {
                treck--;
                switchTreck(treck);
            } else {
                treck = playlist.length - 1;
                switchTreck(treck);
            }
        });
        
        btnNext.addEventListener("click", function() {
            if (treck < playlist.length - 1) {
                treck++;
                switchTreck(treck);
            } else {
                treck = 0;
                switchTreck(treck);
            }
        });
    
    
    function switchTreck (numTreck) {
            sessionStorage.setItem('treck', numTreck);
            audio.src = '.' + playlist[numTreck];
            isAudioPlay = true;
            sessionStorage.setItem('isAudioPlay', 'true');
            table.draw(false);
            localStorage.setItem('audioSrc', '.' + playlist[numTreck]);
            audio.currentTime = 0;
            audio.play();
            table.draw(false);
        }
    
    $('#submit').on('click', function (e) {
                e.preventDefault();
                var files = document.getElementById('uploadFile').files;
                if (files.length > 0) {
                    if (window.FormData !== undefined) {
                        var data = new FormData();
                        data.append("file" + 0, files[0]);
                        
         
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("AddAudio", "Home")',
                            contentType: false,
                            processData: false,
                            data: data,
                            success: function (result) {
                                playlist.push('/Audios/' + files.item(0).name);
                                alert(result);
                                table.draw(false);
                            },
                            error: function (xhr, status, p3) {
                                alert(xhr.responseText);
                            }
                        });
                        
                    } else {
                        alert("Браузер не поддерживает загрузку файлов HTML5!");
                    }
                }
            });
            
            var placeholderElement = $('#modal-placeholder');
            
            placeholderElement.on('hide.bs.modal', '.modal', function () {
                placeholderElement.off('click', '[data-dismiss="modal"]');
            });
            
            table.on('click', 'button[data-delete-btn]', function () {
                var request = $(this).data('url');
                $.get(request).done(function (data) {
                    placeholderElement.html(data);
                    console.log(data);
                    placeholderElement.find('.modal').modal('show');
                });
                
                placeholderElement.on('click',
                    '[data-save="modal"]',
                    function (event) {
                    event.preventDefault();
                    
                    var form = $(this).parents('.modal').find('form');
                    var actionUrl = form.attr('action');
                    var dataToSend = form.serialize();
                    
                    $.post(actionUrl, dataToSend).done(function (data) {
                        var newBody = $('.modal-body', data);
                        placeholderElement.find('.modal-body').replaceWith(newBody);
                        var numberInPlaylist = newBody.find('[name="NumberInPlayList"]').val();
                       
                        playlist.splice(numberInPlaylist - 1, 1);
                        console.log(treck);
                        console.log(numberInPlaylist - 1);
                        if (treck == numberInPlaylist - 1) {
                            if (treck == playlist.length) {
                                switchTreck(treck - 1);
                                console.log(treck);
                            }
                            else {
                             switchTreck(treck);
                             }
                            
                             audio.pause();
                             sessionStorage.setItem('audioSrc', '.' + playlist[treck]);
                             sessionStorage.setItem('audioTime', audio.currentTime);
                             sessionStorage.setItem('isAudioPlay', 'false');
                                                    
                        }
                        if (treck > numberInPlaylist - 1) {
                            treck--;
                        }
                        
                            try {
                                table.draw(false);
                                
                            } finally {
                                placeholderElement.off('click', '[data-save="modal"]');
                            }
                        placeholderElement.find('.modal').modal('hide');
                    });
                    
                });
    
                placeholderElement.on('click',
                    '[data-mdb-dismiss="modal"]',
                    function (event) {
                        event.preventDefault();
                        placeholderElement.find('.modal').modal('hide');
                    });
            });
            
            table.on('click', 'button[data-update-btn]', function () {
                var requestUrl = $(this).data('url');
                $.get(requestUrl).done(function (data) {
                    placeholderElement.html(data);
                    placeholderElement.find('.modal').modal('show');
                });
                
                placeholderElement.on('click',
                    '[data-save="modal"]',
                    function (event) {
                    event.preventDefault();
                    
                    var form = $(this).parents('.modal').find('form');
                    var actionUrl = form.attr('action');
                    var dataToSend = form.serialize();
                    
                    $.post(actionUrl, dataToSend).done(function (data) {
                        var newBody = $('.modal-body', data);
                        placeholderElement.find('.modal-body').replaceWith(newBody);
                        
                        try {
                            var numberInPlaylist = newBody.find('[name="NumberInPlayList"]').val();
                            var audioName = newBody.find('[name="Name"]').val();
                            var rowToUpdate = $('table#audio_table').find('tr[data-number="' + numberInPlaylist + '"]')
                            if (rowToUpdate) {
                                rowToUpdate.find('th[data-name]').text(audioName);
                            }
                            table.draw(false);
                        } finally {
                            placeholderElement.off('click', '[data-save="modal"]');
                            placeholderElement.find('.modal').modal('hide');
                        }
                    });
                });
    
                placeholderElement.on('click',
                    '[data-mdb-dismiss="modal"]',
                    function (event) {
                        event.preventDefault();
                        placeholderElement.find('.modal').modal('hide');
                    });
            });
</script>