@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<AudioPlayer.AudioViewModel>
@{
    Layout = "_Layout";
}
<style>


</style>

<link rel="stylesheet" type="text/css" href="~/css/dataTable.css">
<link rel="stylesheet" type="text/css" href="~/css/index.css">
<h1>Выберите файл для загрузки</h1>
<form asp-action="Index" asp-controller="Home" method="post" enctype="multipart/form-data">
    <input id="audiofile" class="custom-file-input" type="file" accept="audio/*" name="uploadedFile" title=" "/><br>
    <input id="submit" type="submit" value="Загрузить" />
</form>
<div class="audioplayer">
    <audio id="audio" controls></audio>
    <div id="controls">
        <button style="margin-left: 10px; margin-bottom: 5px;" class="play"><img src="~/play.png" alt="|>"/></button>
        <button style="margin-bottom: 5px;" class="pause"><img src="~/pause.png" alt="||"/></button>
        <button style="margin-right: 20px; margin-bottom: 5px; float: right" class="next"><img src="~/next_button.png" alt=">>"/></button>
        <button style="margin-right: 12px; margin-bottom: 5px; float: right" class="prev"><img src="~/previous_button.png" alt="<<"/></button>
    </div>
</div>
 
<h3>Все файлы</h3>
@foreach(var f in Model)
{
    <p style="display: none" class="name">@(f.NameWithExtension)</p>
}

<div class="features">
    <table class="stripe row-border hover table-opacity-background display nowrap text-center" id="audio_table">
        <thead>
        <tr>
            <th>№ в плейлисте</th>
            <th>Название трека</th>
            <th>Длительность</th>
            <th></th>
        </tr>
        </thead>
    </table>
</div>

<div id="modal-placeholder"></div>

<script asp-src-include="js/datatables/jquery.js" type="text/javascript" charset="UTF-8"></script>
<script asp-src-include="js/datatables/dataTable.js" type="text/javascript" charset="UTF-8"></script>
<script asp-src-include="js/indexMenu.js" asp-append-version="true"></script>

<script>
    let audio = document.getElementById("audio");   
    let time = document.querySelector(".time");     
    let btnPlay = document.querySelector(".play");   
    let btnPause = document.querySelector(".pause"); 
    let btnPrev = document.querySelector(".prev");  
    let btnNext = document.querySelector(".next");  
    
    
    let playlist = [];
    
  
    let count = @Model.Count();
    
    for (let i = 0; i < count; i++){
        let song = document.getElementsByTagName('p')[i].textContent;
        playlist.push(song);
    }
    
    console.log(playlist[0])
    console.log(playlist[1])
    
    let treck;
    
    window.onload = function() {
        treck = 0; // Присваиваем переменной ноль
        if (sessionStorage.getItem('audioTime') == null) {
        audio.src = './Audios/' + playlist[0];
        }
        else {
           audio.src = sessionStorage.getItem('audioSrc');
           audio.currentTime = sessionStorage.getItem('audioTime');
           audio.play();
                   audioPlay = setInterval(function () {
                       let audioTime = sessionStorage.getItem('audioTime');
                       sessionStorage.setItem('audioSrc', './Audios/' + playlist[treck]);
                       sessionStorage.setItem('audioTime', audio.currentTime);
                       let audioLength = Math.round(audio.duration)
                       time.style.width = (audioTime * 100) / audioLength + '%';
                       if (audioTime === audioLength && treck < playlist.length - 1) {
                           treck++;
                           switchTreck(treck);
                       } else if (audioTime === audioLength && treck >= playlist.length - 1) {
                           treck = 0;
                           switchTreck(treck);
                       }
                   }, 10);
        }
    }
    
    function switchTreck (numTreck) {
        audio.src = './Audios/' + playlist[numTreck];
        //localStorage.setItem('audioSrc', './Audios/' + playlist[numTreck]);
        audio.currentTime = 0;
        audio.play();
    }
    
    btnPlay.addEventListener("click", function() {
        audio.play();
        audioPlay = setInterval(function () {
            let audioTime = Math.round(audio.currentTime);
            sessionStorage.setItem('audioSrc', './Audios/' + playlist[treck]);
            sessionStorage.setItem('audioTime', audio.currentTime);
            let audioLength = Math.round(audio.duration)
            time.style.width = (audioTime * 100) / audioLength + '%';
            if (audioTime === audioLength && treck < playlist.length - 1) {
                treck++;
                switchTreck(treck);
            } else if (audioTime === audioLength && treck >= playlist.length - 1) {
                treck = 0;
                switchTreck(treck);
            }
        }, 10);
    });
    
    btnPause.addEventListener("click", function() {
        audio.pause();
        clearInterval(audioPlay)
    });
    btnPrev.addEventListener("click", function() {
        if (treck > 0) {
            treck--
            switchTreck(treck);
        } else {
            treck = playlist.length - 1;
            switchTreck(treck);
        }
    });
    
    btnNext.addEventListener("click", function() {
        if (treck < playlist.length - 1) {
            treck++;
            switchTreck(treck);
        } else {
            treck = 0;
            switchTreck(treck);
        }
    });
    
    buildDataTable()
</script>